unit EbsT03Saver;
interface uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  EbsTxt, EbsFonts, EbsTypes, Bytes, Graphics, BoolImage;

//==============================================================================
type
  TEbsT03Saver = class
  private
    procedure SaveFileHeader(ATxt: TEbsTxt; AStream: TStream);
    procedure SaveFields(AStream: TStream; AFields: TEbsFields);
    procedure FieldHeader(AField: TEbsField; AStream: TStream);
    procedure FieldData(AField: TEbsField; AStream: TStream);
    procedure SaveTxt(AStream: TStream; AField: TEbsField);
    procedure SaveBar(AStream: TStream; AField: TEbsField);
    procedure SaveGraph(AStream: TStream; AField: TEbsField);
    procedure SaveOtherTxt(AStream: TStream; AField: TEbsField);
    procedure CopyImageToBitmap(Image: TBoolImage; ABitmap: TBitmap; AField: TEbsField);
    function BarcodeTypeToByte(const ABarcodeType: TEbsBarcodeType): Byte;
    function SpecRegToByte(const ASpecReg: TEbsSpecReg): Byte;
    procedure SaveField(AField: TEbsField; AStream: TStream);

  public
    procedure SaveToFile(ATxt: TEbsTxt; AFileName: string);
    procedure SaveEdgraf(ATxt: TEbsTxt; AStream: TStream);

  end;

  TWordBytes = record
    byte1, byte2: byte;
  end;

//==============================================================================
implementation uses System.Types, DateUtils, Streams, BmpFile, Bmp1BitImage,
  Generics.Defaults, EbsFieldLeftComparer;

//==============================================================================
{ TSaver }

procedure TEbsT03Saver.SaveToFile(ATxt: TEbsTxt; AFileName: string);
var
  AExt: string;
  AStream: TStream;
begin
  AStream := TFileStream.Create(AFileName, fmCreate);
  try
    AExt := ExtractFileExt(AFileName);
    if LowerCase(AExt) = '.t03' then SaveEdgraf(ATxt,AStream);
  finally
    FreeAndNil(AStream);
  end;
end;
//==============================================================================
procedure TEbsT03Saver.SaveFileHeader(ATxt: TEbsTxt; AStream: TStream);
begin
  {type of printer, constant value}
    WriteByte(AStream, $83);

  {text height}
    if ATxt.Fields.TxtHeight=0 then begin  // if 0, then create typical null file version
      WriteByte(AStream, $10);
      Exit;
    end else
    WriteByte(AStream, ATxt.Fields.TxtHeight);
end;

//==============================================================================

procedure TEbsT03Saver.SaveEdgraf(ATxt: TEbsTxt; AStream: TStream);
var
  AFields: TEbsFields;
begin
  if not Assigned(ATxt.Fields) then
    raise Exception.Create('Saving text to edgraf stream error. Fields not assigned!');

  AFields := nil;
  try
    SaveFileHeader(ATxt,AStream);
    {create local copy of object - on the copy we will do all activities on it}
    AFields := ATxt.Fields.Clone(nil) as TEbsFields;
    {sort fields by left}
    AFields.SortByLeft;
    SaveFields(AStream, AFields);

  finally
    if Assigned(AFields) then AFields.Free;
  end;

end;
//==============================================================================

procedure TEbsT03Saver.FieldHeader(AField: TEbsField; AStream: TStream);
begin
    AStream.Seek(10, soFromCurrent);

    if AField is TEbsTextField then WriteByte(AStream, $00);
    if AField is TEbsBarcodeField then WriteByte(AStream, $01);
    if AField is TEbsGraphicField then WriteByte(AStream, $02);
    if AField is TEbsOtherTxtField then WriteByte(AStream, $03);

    AStream.Seek(-11, soFromCurrent);

    AStream.WriteData(AField.Left);
    AStream.WriteData(AField.Width);
    AStream.WriteData(AField.Top);
    AStream.WriteData(AField.Height);

    AStream.Seek(3, soFromCurrent);
end;
//==============================================================================

procedure TEbsT03Saver.FieldData(AField: TEbsField; AStream: TStream);
begin
    if AField is TEbsTextField then SaveTxt(AStream, AField);
    if AField is TEbsBarcodeField then SaveBar(AStream, AField);
    if AField is TEbsGraphicField then SaveGraph(AStream, AField);
    if AField is TEbsOtherTxtField then SaveOtherTxt(AStream, AField);
end;
//==============================================================================
procedure TEbsT03Saver.SaveField(AField: TEbsField; AStream: TStream);
begin
    FieldHeader(AField, AStream);
    FieldData(AField, AStream);
end;

//------------------------------------------------------------------------------
procedure TEbsT03Saver.SaveFields(AStream: TStream; AFields: TEbsFields);
var
  i: integer;
  AField: TEbsField;

begin
  for i:=0 to AFields.Count-1 do begin
    AField := AFields[i];
    SaveField(AField, AStream);
  end;
end;
//==============================================================================


function TEbsT03Saver.SpecRegToByte(const ASpecReg: TEbsSpecReg): Byte;
begin
  case ASpecReg of
    esrNone:        Result := 0;
    esrCountUp:     Result := 1;
    esrCountDown:   Result := 2;
    esrTime:        Result := 3;
    esrDate:        Result := 4;
    esrSpecChan:    Result := 5;
    esrUniDate:     Result := 6;
    esrDateOffset:  Result := 7;
    esrDateOffset2: Result := 8;
    esrSysData:     Result := 9;
    esrMetrix:      Result := 10;
    esrUniCount:    Result := 11;
    esrTxt:         Result := 14;
    esrVar:         Result := 15;
  else
    Result := 0;
  end;
end;
//==============================================================================

procedure TEbsT03Saver.SaveTxt(AStream: TStream; AField: TEbsField);
var
  AByte: Byte;
  i: Integer;
  ABuff: array [0..501] of Byte;
  AFieldTxt: TEbsTextField;
begin
  AFieldTxt := AField as TEbsTextField;
  AStream.Seek(17, soFromCurrent);

  {font}
  WriteByte(AStream, AFieldTxt.FontId);

  {multiplicity and space}
  AByte := AFieldTxt.Multiplicity and $0F;
  AByte := AByte or ((AFieldTxt.CharSpace and $0F) shl 4);
  WriteByte(AStream, AByte);

  {rotation}
  case AFieldTxt.CharRot of
    ecrStd:         AByte := $00;
    ecrRight:       AByte := $01;
    ecrUpsideDown:  AByte := $02;
    ecrLeft:        AByte := $03;
  end;
  WriteByte(AStream, AByte);

  {special reg}
  AByte := SpecRegToByte(AFieldTxt.SpecReg);
  WriteByte(AStream, AByte);

  {front and back space}
  AStream.WriteData(AFieldTxt.FrontSpace, 2);
  AStream.WriteData(AFieldTxt.BackSpace, 2);

  {text content}
  for i:=0 to Length(AFieldTxt.Text)-1 do
    ABuff[i] := ToEbsChar(AFieldTxt.Text[i+1]);
  AStream.WriteBuffer(ABuff, Length(ABuff));
end;
//==============================================================================

function TEbsT03Saver.BarcodeTypeToByte(const ABarcodeType: TEbsBarcodeType): Byte;
begin
  case aBarcodeType of
    ebtCode25Datalogic:     Result := $E0;
    ebtCode253Bars:         Result := $E1;
    ebtCode255Bars:         Result := $E2;
    ebtCode25Interleaved:   Result := $E3;
    ebtCodeAlpha39:         Result := $E4;
    ebtEan8:                Result := $E5;
    ebtEan13:               Result := $E6;
    ebtItf8:                Result := $E7;
    ebtItf14:               Result := $E8;
    ebtCode128B:            Result := $E9;
    ebtCode128:             Result := $EA;
    ebtEan128:              Result := $EB;
    ebtEcc200:              Result := $EC;
  else
    Result := $E0;
  end;
end;
//==============================================================================

procedure TEbsT03Saver.SaveBar(AStream: TStream; AField: TEbsField);
var
  AByte: Byte;
  i, AEndAddr: Integer;
  ABuff: array [0..511] of Byte;
  AFieldBar: TEbsBarcodeField;
  ba: TWordBytes;

begin
  AFieldBar := AField as TEbsBarcodeField;

  if AFieldBar.BarcodeType=ebtEcc200 then begin  //if ecc200 then back to SaveFieldHeader
    AStream.Seek(-11, soFromCurrent);
    exit;
  end;
  AStream.Seek(17, soFromCurrent);

  {barcode type}
  AByte:= BarcodeTypeToByte(AFieldBar.BarcodeType);
  WriteByte(AStream, AByte);
  AStream.Seek(1, soFromCurrent);

  {multiplicity, signature and inversion}
  AByte := AFieldBar.Multiplicity;
  SetBit(AByte, 4, AFieldBar.Signatured);
  SetBit(AByte, 5, AFieldBar.Inverted);
  WriteByte(AStream, AByte);

  {front and back space}
  ba:= TWordBytes(AFieldBar.FrontSpace);
  WriteByte(AStream, ba.byte1);
  WriteByte(AStream, ba.byte2);
  ba:= TWordBytes(AFieldBar.BackSpace);
  WriteByte(AStream, ba.byte1);
  WriteByte(AStream, ba.byte2);

  {height}
  WriteUInt16( AStream, Swap(AFieldBar.Height) );

  {pafal and spec reg}
  WriteByte( AStream, AFieldBar.Pafal);
  WriteByte( AStream, EbsTxt.ToByte(AFieldBar.SpecReg) );

  {size and space of signature}
  AByte := 0;
  SetBit(AByte, 7, AFieldBar.SmallSign);
  SetBit(AByte, 6, AFieldBar.LargeSignSpace);
  WriteByte(AStream, AByte);

  {code content}
  AEndAddr := 0;
  for i:=0 to Length(AFieldBar.Value)-1 do
  begin
    if i=Length(AFieldBar.Value) then break;
    AEndAddr := i;
    ABuff[i+256] := Byte( AFieldBar.Value[i+1] );
  end;
  ABuff[AEndAddr+257] := 0;
  AStream.Write(ABuff, 512);
end;
//==============================================================================

procedure TEbsT03Saver.SaveGraph(AStream: TStream; AField: TEbsField);
var
  ABitmap: TBitmap;
  AFieldGraph: TEbsGraphicField;
  Image: TBoolImage;
  DividedWord: TWordBytes;
begin
  AFieldGraph := AField as TEbsGraphicField;

  AStream.Seek(17, soFromCurrent);
  WriteByte(AStream, $FE);

  {height and width of graphics}
  WriteByte(AStream, AFieldGraph.Height);
  WriteUInt16(AStream, AFieldGraph.Width);

  {front and back space}
  DividedWord:= TWordBytes(AFieldGraph.FrontSpace);
  WriteByte(AStream, DividedWord.byte1);
  WriteByte(AStream, DividedWord.byte2);
  DividedWord:= TWordBytes(AFieldGraph.BackSpace);
  WriteByte(AStream, DividedWord.byte1);
  WriteByte(AStream, DividedWord.byte2);

  {graphics}
  AStream.Seek(2, soFromCurrent);

  ABitmap := TBitmap.Create;
  try
    ABitmap.PixelFormat := pf1bit;
    Image := AFieldGraph.Image;
    CopyImageToBitmap(Image, ABitmap, AFieldGraph);
    ABitmap.SaveToStream(AStream);
  finally
   FreeAndNil(ABitmap);
  end;
end;
//==============================================================================

procedure TEbsT03Saver.CopyImageToBitmap(Image: TBoolImage; ABitmap: TBitmap; AField: TEbsField);
var
  X: integer;
  Y: integer;
begin
  ABitmap.Width := Image.Width;
  ABitmap.Height := Image.Height;

  for Y:=0 to Image.Height-1 do
    for X:=0 to Image.Width-1 do
      if Image[X,Y] then
        ABitmap.Canvas.Pixels[X,Y] := clBlack
      else
        ABitmap.Canvas.Pixels[X,Y] := clWhite;

end;

//==============================================================================
procedure TEbsT03Saver.SaveOtherTxt(AStream: TStream; AField: TEbsField);
var
  i: Integer;
  ABuff: array [0..15] of Byte;
  AFieldOTxt: TEbsOtherTxtField;
begin
  AFieldOTxt := AField as TEbsOtherTxtField;
  AStream.Seek(19, soFromCurrent);

  {front and back space}
  AStream.WriteData(AFieldOTxt.FrontSpace, 2);
  AStream.WriteData(AFieldOTxt.BackSpace, 2);

  {text content}
  for i:=0 to Length(AFieldOTxt.TextName)-1 do
    ABuff[i] := ToEbsChar(AFieldOTxt.TextName[i+1]);
  ABuff[Length(AFieldOTxt.TextName)]:=0;
  AStream.WriteBuffer(ABuff, Length(ABuff));
end;


end.
